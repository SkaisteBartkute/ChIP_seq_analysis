import glob
import os

samples = ["SRR8134484","SRR8134485","SRR8134486","SRR8134487","SRR8134488","SRR8134489"]

input_path = "/scratch/lustre/home/skba0280/Epigenomics_raw_data"

genome_index_dir = "/scratch/lustre/home/skba0280/references/human_genome/human_genome"

genome_file = "/scratch/lustre/home/skba0280/references/human_genome/Homo_sapiens.GRCh38.dna.toplevel.fa"

genome_gtf = "/scratch/lustre/home/skba0280/references/human_genome/gencode.v47.chr_patch_hapl_scaff_noprefix.annotation.gtf"

genome_blacklisted_regions = "/scratch/lustre/home/skba0280/references/human_genome/hg38-blacklist-genomic-regions.bed"

rule all:
   input:
      expand("results/fastp/{sample}_trimmed.fastq",sample=samples),
      expand("results/fastp/{sample}_fastp.html",sample=samples),
      expand("results/fastp/{sample}_fastp.json",sample=samples),
      expand("results/fastqc/{sample}_fastqc.html",sample=samples),
      expand("results/fastqc/{sample}_fastqc.zip",sample=samples),
      expand("results/fastqc/{sample}_trimmed_fastqc.html",sample=samples),
      expand("results/fastqc/{sample}_trimmed_fastqc.zip",sample=samples),
      expand("results/bwa/{sample}.sai",sample=samples),
      expand("results/bwa/{sample}.sam",sample=samples),
      expand("results/bwa/{sample}.bam",sample=samples),
      expand("results/bwa/{sample}_rmdup.bam",sample=samples),
      expand("results/bwa/{sample}_rmdup.flagstat",sample=samples),
      expand("results/bedGraph/{sample}.bedgraph",sample=samples),
      expand("results/bedGraph/{sample}_filtered.bedgraph",sample=samples),
      "results/merged/merged.bam",
      expand("results/{sample}_tagDirectory/tagInfo.txt",sample=samples),
      expand("results/{sample}_tagDirectory/superEnhancers.txt",sample=samples),
      expand("results/{sample}_tagDirectory/regions.txt",sample=samples),
      expand("results/{sample}_tagDirectory/regions_filtered.txt",sample=samples),
      expand("results/{sample}_tagDirectory/superEnhancers_filtered.txt",sample=samples),
      "results/merged_tagDirectory/tagInfo.txt",
      "results/merged_tagDirectory/superEnhancers.txt",
      "results/merged_tagDirectory/regions.txt",
      "results/merged_tagDirectory/regions_filtered.txt",
      "results/merged_tagDirectory/superEnhancers_filtered.txt",
      expand("results/{sample}_tagDirectory/regions.bed",sample=samples),
      expand("results/{sample}_tagDirectory/superEnhancers.bed",sample=samples),
      "results/merged_tagDirectory/regions.bed",
      "results/merged_tagDirectory/superEnhancers.bed",
      "results/mergedPeaks/mergedRegions.txt",
      "results/mergedPeaks/mergedSuperEnhancers.txt",
      "results/mergedPeaks/mergedRegions.bed",
      "results/mergedPeaks/mergedSuperEnhancers.bed",
      expand("results/{sample}_tagDirectory/{sample}_annotated_regions.txt",sample=samples),
      expand("results/{sample}_tagDirectory/{sample}_annotated_enhancers.txt",sample=samples),
      "results/merged_tagDirectory/merged_annotated_regions.txt",
      "results/merged_tagDirectory/merged_annotated_enhancers.txt",
      "results/mergedPeaks/merged_peaks_annotated_regions.txt",
      "results/mergedPeaks/merged_peaks_annotated_enhancers.txt",
      "results/multiqc/multiqc_report.html",      

rule fastp:
   input:
      fq = lambda wildcards:f"{input_path}/{wildcards.sample}.fastq.gz",
   output:
      trimmed = "results/fastp/{sample}_trimmed.fastq",
      html = "results/fastp/{sample}_fastp.html",
      json = "results/fastp/{sample}_fastp.json",
   conda:"envs/preprocess_chipseq.yaml"
   threads:4
   shell:
      """
      fastp -i {input.fq} \
      --thread {threads} \
      -q 25 -l 20 \
      -o {output.trimmed} \
      -h {output.html} \
      -j {output.json}
      """

rule fastqc:
   input:
      fq = lambda wildcards:f"{input_path}/{wildcards.sample}.fastq.gz",
      fq_trim = "results/fastp/{sample}_trimmed.fastq",
   output:
      html = "results/fastqc/{sample}_fastqc.html",
      zip = "results/fastqc/{sample}_fastqc.zip",
      html_trim = "results/fastqc/{sample}_trimmed_fastqc.html",
      zip_trim = "results/fastqc/{sample}_trimmed_fastqc.zip",
   conda:"envs/preprocess_chipseq.yaml"
   threads:4
   shell:
      """
      fastqc -t {threads} --outdir results/fastqc {input.fq} {input.fq_trim}
      """

rule bwa:
   input:
     fq = "results/fastp/{sample}_trimmed.fastq",
   output:
     sai = "results/bwa/{sample}.sai",
     sam = "results/bwa/{sample}.sam",
     bam = "results/bwa/{sample}.bam",
     bam_rmdup = "results/bwa/{sample}_rmdup.bam",
   conda:"envs/preprocess_chipseq.yaml"
   threads:4
   shell:
     """
     bwa aln -t {threads} {genome_index_dir} {input.fq} > {output.sai}
     bwa samse {genome_index_dir} {output.sai} {input.fq} > {output.sam}
     samtools view -@ {threads} -F 0x04 -q 30 -b {output.sam} | samtools sort -@ {threads} -o {output.bam}
     samtools markdup -@ {threads} -r -s {output.bam} {output.bam_rmdup}
     """

rule flagstat:
   input:
     bam = "results/bwa/{sample}_rmdup.bam",
   output:
     flagstat = "results/bwa/{sample}_rmdup.flagstat",
   conda:"envs/preprocess_chipseq.yaml"
   threads:4
   shell:
     """
     samtools flagstat -@ {threads} {input.bam} > {output.flagstat}
     """

rule bedGraph:
   input:
     bam = "results/bwa/{sample}_rmdup.bam",
   output:
     bedGraph = "results/bedGraph/{sample}.bedgraph",
   conda: "envs/preprocess_chipseq.yaml"
   threads:4
   shell:
     """
     samtools index -@ {threads} {input.bam}
     bamCoverage --bam {input.bam} --outFileFormat bedgraph -o {output.bedGraph}
     """

rule bedGraphFiltered:
   input:
     bedGraph = "results/bedGraph/{sample}.bedgraph",
   output:
     bedGraph_filtered = "results/bedGraph/{sample}_filtered.bedgraph",
   shell:
     """
     bedtools intersect -v -a {input.bedGraph} -b {genome_blacklisted_regions} > {output.bedGraph_filtered}
     """

rule merge_bam:
   input:
     expand("results/bwa/{sample}_rmdup.bam",sample=samples),
   output:
     "results/merged/merged.bam",
   conda:"envs/preprocess_chipseq.yaml"
   threads:4
   shell:
     """
     samtools merge -@ {threads} {output} {input}
     samtools index -@ {threads} {output}
     """

rule makeTagDirectory:
   input:
     bam = "results/bwa/{sample}_rmdup.bam",
   output:
     txt = "results/{sample}_tagDirectory/tagInfo.txt",
   conda:"envs/preprocess_chipseq.yaml"
   shell:
     """
     makeTagDirectory results/{wildcards.sample}_tagDirectory {input.bam}
     """

rule findPeaks:
  input:
    tag = "results/{sample}_tagDirectory/tagInfo.txt",
  output:
    enh = "results/{sample}_tagDirectory/superEnhancers.txt",
    peaks = "results/{sample}_tagDirectory/regions.txt",
  conda:"envs/preprocess_chipseq.yaml"
  shell:
    """
    findPeaks results/{wildcards.sample}_tagDirectory -style histone -o auto 
    findPeaks results/{wildcards.sample}_tagDirectory -style super -o auto 
    """

rule filterPeaks:
  input:
    regions = "results/{sample}_tagDirectory/regions.txt",
    enhancers = "results/{sample}_tagDirectory/superEnhancers.txt",
  output:
    regions_filtered = "results/{sample}_tagDirectory/regions_filtered.txt",
    enhancers_filtered = "results/{sample}_tagDirectory/superEnhancers_filtered.txt",
  conda:"envs/preprocess_chipseq.yaml"
  shell:
    """
    awk 'BEGIN{{OFS="\t"}} !/^#/ {{print $2, $3, $4, $5, $1, $6, $7, $8, $9}}' {input.regions} > regions_ordered_v1.txt
    awk 'NF==9' regions_ordered_v1.txt > regions_ordered.txt
    bedtools intersect -v -a regions_ordered.txt -b {genome_blacklisted_regions} > regions_ordered_filtered.txt
    awk 'BEGIN{{OFS="\t"}} NF==9 {{print $5, $1, $2, $3, $4, $6, $7, $8, $9}}' regions_ordered_filtered.txt > {output.regions_filtered}
    awk 'BEGIN{{OFS="\t"}} !/^#/ {{print $2, $3, $4, $5, $1, $6, $7, $8, $9}}' {input.enhancers} > superEnhancers_ordered_v1.txt
    awk 'NF==9' superEnhancers_ordered_v1.txt > superEnhancers_ordered.txt
    bedtools intersect -v -a superEnhancers_ordered.txt -b {genome_blacklisted_regions} > superEnhancers_ordered_filtered.txt
    awk 'BEGIN{{OFS="\t"}} NF==9 {{print $5, $1, $2, $3, $4, $6, $7, $8, $9}}' superEnhancers_ordered_filtered.txt > {output.enhancers_filtered}
    """

rule mergedMakeTagDirectory:
   input:
      bam = "results/merged/merged.bam",
   output:
      txt = "results/merged_tagDirectory/tagInfo.txt",
   conda:"envs/preprocess_chipseq.yaml"
   shell:
      """
      makeTagDirectory results/merged_tagDirectory {input.bam}
      """

rule mergedFindPeaks:
   input:
     tag = "results/merged_tagDirectory/tagInfo.txt",
   output:
     enh = "results/merged_tagDirectory/superEnhancers.txt",
     peaks = "results/merged_tagDirectory/regions.txt",
   conda:"envs/preprocess_chipseq.yaml"
   shell:
     """
     findPeaks results/merged_tagDirectory -style histone -o auto
     findPeaks results/merged_tagDirectory -style super -o auto
     """

rule filterMergedPeaks:
   input:
     regions= "results/merged_tagDirectory/regions.txt",
     enhancers = "results/merged_tagDirectory/superEnhancers.txt",
   output:
     regions_filtered = "results/merged_tagDirectory/regions_filtered.txt",
     enhancers_filtered = "results/merged_tagDirectory/superEnhancers_filtered.txt",
   conda:"envs/preprocess_chipseq.yaml"
   shell:
     """
     awk 'BEGIN{{OFS="\t"}} !/^#/ {{print $2, $3, $4, $5, $1, $6, $7, $8, $9}}' {input.regions} > regions_ordered_v1.txt
     awk 'NF==9' regions_ordered_v1.txt > regions_ordered.txt
     bedtools intersect -v -a regions_ordered.txt -b {genome_blacklisted_regions} > regions_ordered_filtered.txt
     awk 'BEGIN{{OFS="\t"}} NF==9 {{print $5, $1, $2, $3, $4, $6, $7, $8, $9}}' regions_ordered_filtered.txt > {output.regions_filtered}
     awk 'BEGIN{{OFS="\t"}} !/^#/ {{print $2, $3, $4, $5, $1, $6, $7, $8, $9}}' {input.enhancers} > superEnhancers_ordered_v1.txt
     awk 'NF==9' superEnhancers_ordered_v1.txt > superEnhancers_ordered.txt
     bedtools intersect -v -a superEnhancers_ordered.txt -b {genome_blacklisted_regions} > superEnhancers_ordered_filtered.txt
     awk 'BEGIN{{OFS="\t"}} NF==9 {{print $5, $1, $2, $3, $4, $6, $7, $8, $9}}' superEnhancers_ordered_filtered.txt > {output.enhancers_filtered}
     """
     
rule convertToBed:
   input:
     sample_regions = "results/{sample}_tagDirectory/regions_filtered.txt",
     sample_enhancers = "results/{sample}_tagDirectory/superEnhancers_filtered.txt",
   output:
     sample_regions_bed = "results/{sample}_tagDirectory/regions.bed",
     sample_enhancers_bed = "results/{sample}_tagDirectory/superEnhancers.bed",
   conda:"envs/preprocess_chipseq.yaml"
   shell:
     """
     pos2bed.pl {input.sample_regions} > {output.sample_regions_bed}
     pos2bed.pl {input.sample_enhancers} > {output.sample_enhancers_bed}
     """

rule convertMergedToBed:
   input:
     merged_regions = "results/merged_tagDirectory/regions_filtered.txt",
     merged_enhancers = "results/merged_tagDirectory/superEnhancers_filtered.txt",
   output:
     merged_regions_bed = "results/merged_tagDirectory/regions.bed",
     merged_enhancers_bed = "results/merged_tagDirectory/superEnhancers.bed",
   conda:"envs/preprocess_chipseq.yaml"
   shell:
     """
     pos2bed.pl {input.merged_regions} > {output.merged_regions_bed}
     pos2bed.pl {input.merged_enhancers} > {output.merged_enhancers_bed}
     """

rule mergePeakFiles:
   input:
     regions = expand("results/{sample}_tagDirectory/regions_filtered.txt",sample=samples),
     enhancers = expand("results/{sample}_tagDirectory/superEnhancers_filtered.txt",sample=samples),
   output:
     merged_regions = "results/mergedPeaks/mergedRegions.txt",
     merged_enhancers = "results/mergedPeaks/mergedSuperEnhancers.txt",
   conda:"envs/preprocess_chipseq.yaml"
   shell:
     """
     mergePeaks {input.regions} > {output.merged_regions}
     mergePeaks {input.enhancers} > {output.merged_enhancers}
     """

rule convertMergedPeaksToBed:
   input:
     merged_regions = "results/mergedPeaks/mergedRegions.txt",
     merged_enhancers = "results/mergedPeaks/mergedSuperEnhancers.txt",
   output:
     merged_regions_bed = "results/mergedPeaks/mergedRegions.bed",
     merged_enhancers_bed = "results/mergedPeaks/mergedSuperEnhancers.bed",
   conda:"envs/preprocess_chipseq.yaml"
   shell:
     """
     pos2bed.pl {input.merged_regions} > {output.merged_regions_bed}
     pos2bed.pl {input.merged_enhancers} > {output.merged_enhancers_bed}
     """

rule annotatePeaksSamples:
   input:
     sample_regions = "results/{sample}_tagDirectory/regions_filtered.txt",
     sample_enhancers = "results/{sample}_tagDirectory/superEnhancers_filtered.txt",
   output:
     annotated_sample_regions = "results/{sample}_tagDirectory/{sample}_annotated_regions.txt",
     annotated_sample_enhancers = "results/{sample}_tagDirectory/{sample}_annotated_enhancers.txt",
   shell:
     """
     annotatePeaks.pl {input.sample_regions} {genome_file} -gtf {genome_gtf} > {output.annotated_sample_regions}
     annotatePeaks.pl {input.sample_enhancers} {genome_file} -gtf {genome_gtf} > {output.annotated_sample_enhancers}
     """

rule annotatePeaksMerged:
   input:
     merged_regions = "results/merged_tagDirectory/regions_filtered.txt",
     merged_enhancers = "results/merged_tagDirectory/superEnhancers_filtered.txt",
   output:
     annotated_merged_regions = "results/merged_tagDirectory/merged_annotated_regions.txt",
     annotated_merged_enhancers = "results/merged_tagDirectory/merged_annotated_enhancers.txt",
   shell:
     """
     annotatePeaks.pl {input.merged_regions} {genome_file} -gtf {genome_gtf} > {output.annotated_merged_regions}
     annotatePeaks.pl {input.merged_enhancers} {genome_file} -gtf {genome_gtf} > {output.annotated_merged_enhancers}
     """

rule annotateMergedPeaks:
   input:
     merged_peaks_regions = "results/mergedPeaks/mergedRegions.txt",
     merged_peaks_enhancers = "results/mergedPeaks/mergedSuperEnhancers.txt",
   output:
     annotated_merged_peaks_regions = "results/mergedPeaks/merged_peaks_annotated_regions.txt",
     annotated_merged_peaks_enhancers = "results/mergedPeaks/merged_peaks_annotated_enhancers.txt",
   shell:
     """
     annotatePeaks.pl {input.merged_peaks_regions} {genome_file} -gtf {genome_gtf} > {output.annotated_merged_peaks_regions}
     annotatePeaks.pl {input.merged_peaks_enhancers} {genome_file} -gtf {genome_gtf} > {output.annotated_merged_peaks_enhancers}
     """
     
rule multiqc:
   input:
     expand("results/fastqc/{sample}_fastqc.zip",sample=samples),
     expand("results/fastqc/{sample}_trimmed_fastqc.zip",sample=samples),
     expand("results/bwa/{sample}_rmdup.flagstat",sample=samples),
   output:
     "results/multiqc/multiqc_report.html",
   log:
     "logs/multiqc.log",
   conda:"envs/preprocess_chipseq.yaml",
   shell:
     """
     multiqc -s --force --outdir results/multiqc/ {input}
     """

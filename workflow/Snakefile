import glob
import os

samples = ["SRR8134484", "SRR8134485","SRR8134486","SRR8134487","SRR8134488","SRR8134489"]

input_path = "/scratch/lustre/home/skba0280/Epigenomics_raw_data"

genome_index_dir = "/scratch/lustre/home/skba0280/references/human_genome/human_genome"

adapter_path = "/scratch/lustre/home/skba0280/references/adapters/adapters.fasta"

rule all:
   input:
      expand("results/fraction/{sample}.fastq",sample=samples),
      expand("results/fastp/{sample}_trimmed.fastq",sample=samples),
      expand("results/fastp/{sample}_fastp.html",sample=samples),
      expand("results/fastp/{sample}_fastp.json",sample=samples),
      expand("results/fastqc/{sample}_fastqc.html",sample=samples),
      expand("results/fastqc/{sample}_fastqc.zip",sample=samples),
      expand("results/fastqc/{sample}_trimmed_fastqc.html",sample=samples),
      expand("results/fastqc/{sample}_trimmed_fastqc.zip",sample=samples),
      expand("results/bwa/{sample}.sai",sample=samples),
      expand("results/bwa/{sample}.sam",sample=samples),
      expand("results/bwa/{sample}.bam",sample=samples),
      expand("results/bwa/{sample}_rmdup.bam",sample=samples),
      expand("results/bedGraph/{sample}.bedGraph",sample=samples),
      "results/merged/merged.bam",
      expand("results/{sample}_tagDirectory",sample=samples),
      expand("results/{sample}_tagDirectory/superEnhancers.txt",sample=samples),
      expand("results/{sample}_tagDirectory/peaks.txt",sample=samples),
      expand("results/{sample}_tagDirectory/annotatedPeaks.txt",sample=samples),

rule fraction:
   input:
      fq = lambda wildcards:f"{input_path}/{wildcards.sample}.fastq.gz",
   output:
      fqfrac = "results/fraction/{sample}.fastq",
   shell:
      """
      seqtk sample -s100 {input.fq} 20000 > {output.fqfrac}
      """

rule fastp:
   input:
      fq = "results/fraction/{sample}.fastq",
   output:
      trimmed = "results/fastp/{sample}_trimmed.fastq",
      html = "results/fastp/{sample}_fastp.html",
      json = "results/fastp/{sample}_fastp.json",
   conda:"envs/preprocess_chipseq.yaml"
   shell:
      """
      fastp -i {input.fq} \
      --adapter_fasta {adapter_path} \
      -q 25 -l 20 \
      -o {output.trimmed} \
      -h {output.html} \
      -j {output.json}
      """

rule fastqc:
   input:
      fq = "results/fraction/{sample}.fastq",
      fq_trim = "results/fastp/{sample}_trimmed.fastq",
   output:
      html = "results/fastqc/{sample}_fastqc.html",
      zip = "results/fastqc/{sample}_fastqc.zip",
      html_trim = "results/fastqc/{sample}_trimmed_fastqc.html",
      zip_trim = "results/fastqc/{sample}_trimmed_fastqc.zip",
   conda:"envs/preprocess_chipseq.yaml"
   shell:
      """
      fastqc --outdir results/fastqc {input.fq} {input.fq_trim}
      """

rule bwa:
   input:
     fq = "results/fraction/{sample}.fastq",
   output:
     sai = "results/bwa/{sample}.sai",
     sam = "results/bwa/{sample}.sam",
     bam = "results/bwa/{sample}.bam",
     bam_rmdup = "results/bwa/{sample}_rmdup.bam",
   conda:"envs/preprocess_chipseq.yaml"
   shell:
     """
     bwa aln {genome_index_dir} {input.fq} > {output.sai}
     bwa samse {genome_index_dir} {output.sai} {input.fq} > {output.sam}
     samtools view -F 0x04 -q 30 -b {output.sam} | samtools sort -o {output.bam}
     samtools markdup -r -s {output.bam} {output.bam_rmdup}
     """

rule bedGraph:
   input:
     bam = "results/bwa/{sample}_rmdup.bam",
   output:
     bedGraph = "results/bedGraph/{sample}.bedGraph",
   conda: "envs/preprocess_chipseq.yaml"
   shell:
     """
     bamCoverage --bam {input.bam} --outFileFormat bedGraph -o {output.bedGraph}
     """

rule merge_bam:
   input:
     expand("results/bwa/{sample}_rmdup.bam",sample=samples),
   output:
     "results/merged/merged.bam",
   conda:"envs/preprocess_chipseq.yaml"
   shell:
     """
     samtools merge {output} {input}
     samtools index {output}
     """

rule makeTagDirectory:
   input:
     expand("results/bwa/{sample}_rmdup.bam",sample=samples),
   output:
     expand("results/{sample}_tagDirectory",sample=samples),
   conda:"envs/preprocess_chipseq.yaml"
   shell:
     """
     makeTagDirectory {output} {input}
     """

rule findPeaks:
  input:
    expand("results/{sample}_tagDirectory",sample=samples),
  output:
    enh = "results/{sample}_tagDirectory/superEnhancers.txt",
    peaks = "results/{sample}_tagDirectory/regions.txt",
    annotated = "results/{sample}_tagDirectory/annotatedPeaks.txt",
  conda:"envs/preprocess_chipseq.yaml"
  shell:
    """
    findPeaks {input} -style histone -nfr -o auto 
    findPeaks {input} -style super -L 0 -superSlope -1000 -o auto 
    """
